AWSTemplateFormatVersion: '2010-09-09'
#Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  Region:
    Type: String
    #Default: 'us-east-1'
    Description: The AWS region in which to create resources

  AccountId:
    Type: String
    #Default: '548616401217'
    Description: The AWS account ID where the resources will be created.
      
  Env:
    Type: String
    #Default: 'devops'
    Description: Environment name.
    
  MyLambdaFunctionName1:
    Type: String
    #Default: dev
    Description: LambdaFunction name.
    
  MyLambdaFunctionArn1:
    Type: String
    #Default: dev
    Description: LambdaFunction Arn.
  
  MyLambdaFunctionName2:
    Type: String
    #Default: dev
    Description: LambdaFunction name.
    
  MyLambdaFunctionArn2:
    Type: String
    #Default: dev
    Description: LambdaFunction Arn.
    
    
Resources:
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${Env}_users_api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi1
      ParentId: 
        Fn::GetAtt:
          - "MyRestApi1"
          - "RootResourceId"
      PathPart: 'test1'
      
  MyResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi1
      ParentId: 
        Fn::GetAtt:
          - "MyRestApi1"
          - "RootResourceId"
      PathPart: 'test2'

  MyResource7:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi1
      ParentId: 
        Fn::GetAtt:
          - "MyRestApi1"
          - "RootResourceId"
      PathPart: 'culture'
    DependsOn:
      - MyRestApi1

  Nested4Resource7:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi1
      ParentId: !Ref MyResource7
      PathPart: 'psychological_safety'
    DependsOn:
      - MyResource7

  Nested1Nested4Resource7:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi1
      ParentId: !Ref Nested4Resource7
      PathPart: 'current'
    DependsOn:
      - Nested4Resource7

      
  MyMethod1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE #COGNITO_USER_POOLS  # Set authorization type to COGNITO_USER_POOLS
     # AuthorizerId: !Ref MyAuthorizer  # Set the ID of the authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MyLambdaFunctionArn1}/invocations'
        
 
  
  MyMethod2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource2
      HttpMethod: GET
      AuthorizationType: NONE #COGNITO_USER_POOLS  # Set authorization type to COGNITO_USER_POOLS
     # AuthorizerId: !Ref MyAuthorizer  # Set the ID of the authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MyLambdaFunctionArn2}/invocations'
   
   
  MyAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: my-cognito-authorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref MyRestApi1
      ProviderARNs:
        - !Sub arn:aws:cognito-idp:${Region}:${AccountId}:userpool/us-east-1_zHG6ezXPp    #${UserPoolId}

  MyDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - MyMethod1
      - MyMethod2
       
    Properties:
      RestApiId: !Ref MyRestApi1

  MyStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref MyRestApi1
      DeploymentId: !Ref MyDeployment
      StageName: !Sub '${Env}'
      Variables:
        env: !Sub '${Env}'
        
  MyLambdaPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub  ${MyLambdaFunctionName1}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${Region}:${AccountId}:${MyRestApi1}/${Env}/GET/test1'
      
  MyLambdaPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub  ${MyLambdaFunctionName2}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${Region}:${AccountId}:${MyRestApi1}/${Env}/GET/test2'
      
      
